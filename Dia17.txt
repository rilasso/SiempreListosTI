---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Patrones de Diseño

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Clasificacion 
    Patrones Creacionales
    Patrones Estructurales
    Patrones de Comportamineto

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Ventajas
    Conforman un palio catalogo de problemas y soluciones
    Estandarizan la resolucion de determinados problemas
    Condensan y simplifican el aprendizaje de las buenas practicas
    Proporcionan un vocabulario comun entre desarrolladores
    Permite Ahorrar grandes cantidades de tiempo en la construccion de software
    Evitan "Reinventar ka rueda"

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Creacionales
    Proporcionan mecanismos de creacion de objetos que incrementan la flexibilidad y la reutilizacion de codigo existente

Estructurales   
    Explican como ensamblar objetos y clases en estructuras mas grandes a la vez que se mantienen la flexibilidad y eficiencia de la estructuras

Comportamiento
    Se encargan de una comunicacion efectiva y la asignacion de responsabilidades entre objetos

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Patrones Creacionales
    Factory Method (Se utilza dentro del banco)
       Proporciona una interfaz para crear objetos en una superclase, pero permite que las subclases alteren el tipo de objetos 
        que se crearán. Proporciona instanciación de objetos implícita a través de interfaces comunes
    Abstract Factory  
        En este patrón, una interfaz crea conjuntos o familias de objetos relacionados sin especificar el nombre de la clase.
    Builder (Se utilza dentro del banco)
        Permite producir diferentes tipos y representaciones de un objeto utilizando el mismo código de construcción. Se utiliza 
            para la creación etapa por etapa de un objeto complejo combinando objetos simples. La creación final de objetos depende 
            de las etapas del proceso creativo, pero es independiente de otros objetos.
    Prototype 
        Permite copiar objetos existentes sin hacer que su código dependa de sus clases. Se utiliza para restringir las operaciones 
            de memoria / base de datos manteniendo la modificación al mínimo utilizando copias de objetos.
    Singleton (Se utilza dentro del banco)
        Este patrón de diseño restringe la creación de instancias de una clase a un único objeto. 

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Patrones Estructurales 
    Adapter
        Se utiliza para vincular dos interfaces que no son compatibles y utilizan sus funcionalidades. 
            El adaptador permite que las clases trabajen juntas de otra manera que no podrían al ser interfaces incompatibles.
    Bridge
        En este patrón hay una alteración estructural en las clases principales y de implementador de interfaz sin tener ningún efecto entre ellas. 
            Estas dos clases pueden desarrollarse de manera independiente y solo se conectan utilizando una interfaz como puente.
    Composite
        Se usa para agrupar objetos como un solo objeto. Permite componer objetos en estructuras de árbol y luego trabajar con estas estructuras 
            como si fueran objetos individuales.
    Decorator
        Este patrón restringe la alteración de la estructura del objeto mientras se le agrega una nueva funcionalidad. La clase inicial permanece 
            inalterada mientras que una clase decorator proporciona capacidades adicionales.
    Facade
        Proporciona una interfaz simplificada para una biblioteca, un marco o cualquier otro conjunto complejo de clases.
    Flyweight
        El patrón Flyweight se usa para reducir el uso de memoria y mejorar el rendimiento al reducir la creación de objetos. El patrón busca objetos 
            similares que ya existen para reutilizarlo en lugar de crear otros nuevos que sean similares.
    Proxy
        Se utiliza para crear objetos que pueden representar funciones de otras clases u objetos y la interfaz se utiliza para acceder a estas funcionalidades

---------------------------------------------------------------------------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
